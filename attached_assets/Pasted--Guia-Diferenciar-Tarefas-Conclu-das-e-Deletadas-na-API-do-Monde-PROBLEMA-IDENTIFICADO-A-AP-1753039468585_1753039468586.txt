# Guia: Diferenciar Tarefas Concluídas e Deletadas na API do Monde

## PROBLEMA IDENTIFICADO
A API do Monde (`https://web.monde.com.br/api/v2`) não diferencia claramente tarefas "concluídas" e "deletadas" nos endpoints padrão. Preciso implementar uma solução para distinguir esses dois status.

## ESTRUTURA DA API MONDE

### Autenticação
```bash
curl "https://web.monde.com.br/api/v2/tokens" \
  -d '{"data": {"type": "tokens", "attributes": {"login": "SEU_LOGIN", "password": "SUA_SENHA"}}}' \
  -X POST \
  -H "Accept: application/vnd.api+json" \
  -H "Content-Type: application/vnd.api+json"
```

### Endpoints de Tarefas Disponíveis
- `GET /api/v2/tasks` - Listar tarefas
- `GET /api/v2/tasks/:id` - Visualizar tarefa específica
- `POST /api/v2/tasks` - Criar nova tarefa
- `PATCH /api/v2/tasks/:id` - Atualizar tarefa
- `DELETE /api/v2/tasks/:id` - Deletar tarefa

## ESTRATÉGIAS PARA DIFERENCIAR STATUS

### Estratégia 1: Análise de Campos de Status
```javascript
// IMPLEMENTAR: Verificar se existe campo 'status' ou 'state' na resposta das tarefas
async function getTasks(token) {
  const response = await fetch('https://web.monde.com.br/api/v2/tasks', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/vnd.api+json',
      'Content-Type': 'application/vnd.api+json'
    }
  });
  
  const data = await response.json();
  
  // ANALISAR: Verificar se existe campo status nos attributes
  data.data.forEach(task => {
    console.log('Task attributes:', task.attributes);
    // Procurar por: status, state, completed, finished, deleted, archived
  });
  
  return data;
}
```

### Estratégia 2: Usar Filtros Específicos da API Monde (PRIORITÁRIO)
```javascript
// IMPLEMENTAR: Filtros baseados na interface do Monde
const endpoints_filtros_monde = [
  // Filtro por situação (CAMPO CONFIRMADO)
  '/api/v2/tasks?filter[situacao]=ativa',
  '/api/v2/tasks?filter[situacao]=concluida', 
  '/api/v2/tasks?filter[situacao]=excluida',
  '/api/v2/tasks?filter[situation]=active',
  '/api/v2/tasks?filter[situation]=completed',
  '/api/v2/tasks?filter[situation]=deleted',
  
  // Alternativas de filtro
  '/api/v2/tasks?situacao=concluida',
  '/api/v2/tasks?situation=deleted',
  '/api/v2/tasks?status=completed'
];

// FUNÇÃO ESPECÍFICA PARA MONDE
async function getTasksBySituation(token, situacao) {
  const url = `https://web.monde.com.br/api/v2/tasks?filter[situacao]=${situacao}`;
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      }
    });
    
    const data = await response.json();
    console.log(`Tarefas com situação "${situacao}":`, data);
    return data;
  } catch (error) {
    console.error(`Erro ao buscar tarefas ${situacao}:`, error);
  }
}

// TESTE ESPECÍFICO PARA OS 3 STATUS
async function testarFiltrosSituacao(token) {
  console.log('=== TESTANDO FILTROS DE SITUAÇÃO ===');
  
  const situacoes = ['ativa', 'concluida', 'excluida'];
  
  for (const situacao of situacoes) {
    console.log(`\n--- Testando situação: ${situacao} ---`);
    await getTasksBySituation(token, situacao);
  }
  
  // Testar também em inglês
  const situations = ['active', 'completed', 'deleted'];
  
  for (const situation of situations) {
    console.log(`\n--- Testing situation: ${situation} ---`);
    const url = `https://web.monde.com.br/api/v2/tasks?filter[situation]=${situation}`;
    
    try {
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.api+json',
          'Content-Type': 'application/vnd.api+json'
        }
      });
      
      const data = await response.json();
      console.log(`Tasks with situation "${situation}":`, data);
    } catch (error) {
      console.error(`Error fetching ${situation} tasks:`, error);
    }
  }
}
```

### Estratégia 3: Verificar Relacionamentos
```javascript
// IMPLEMENTAR: Analisar relationships para status ou categorias
function analyzeTaskRelationships(task) {
  if (task.relationships) {
    // Verificar se existe relacionamento com status/categoria
    const possibleStatusRelations = [
      'status', 'state', 'category', 'task-category', 'workflow-status'
    ];
    
    possibleStatusRelations.forEach(relation => {
      if (task.relationships[relation]) {
        console.log(`Found status relation: ${relation}`, task.relationships[relation]);
      }
    });
  }
}
```

### Estratégia 4: Usar Task Categories para Status
```javascript
// IMPLEMENTAR: Usar categories como status
async function getTaskCategories(token) {
  const response = await fetch('https://web.monde.com.br/api/v2/task-categories', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/vnd.api+json',
      'Content-Type': 'application/vnd.api+json'
    }
  });
  
  const categories = await response.json();
  
  // PROCURAR categorias como: "Concluído", "Finalizado", "Deletado", "Arquivado"
  return categories.data;
}
```

### Estratégia 5: Implementar Sistema de Status Próprio
```javascript
// SOLUÇÃO ALTERNATIVA: Criar sistema próprio de controle
class TaskStatusManager {
  constructor() {
    this.statusMapping = new Map();
    this.deletedTasks = new Set();
    this.completedTasks = new Set();
  }
  
  // Marcar tarefa como concluída (sem deletar da API)
  async markAsCompleted(taskId, token) {
    try {
      // Atualizar tarefa na API com campo personalizado ou categoria
      const updateData = {
        data: {
          type: 'tasks',
          id: taskId,
          attributes: {
            // USAR: Campo disponível para marcar como concluída
            observations: 'STATUS:COMPLETED', // ou outro campo disponível
            // OU usar categoria específica se disponível
          }
        }
      };
      
      const response = await fetch(`https://web.monde.com.br/api/v2/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.api+json',
          'Content-Type': 'application/vnd.api+json'
        },
        body: JSON.stringify(updateData)
      });
      
      if (response.ok) {
        this.completedTasks.add(taskId);
        this.statusMapping.set(taskId, 'completed');
      }
      
      return response;
    } catch (error) {
      console.error('Erro ao marcar como concluída:', error);
    }
  }
  
  // Deletar tarefa fisicamente
  async deleteTask(taskId, token) {
    try {
      const response = await fetch(`https://web.monde.com.br/api/v2/tasks/${taskId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.api+json',
          'Content-Type': 'application/vnd.api+json'
        }
      });
      
      if (response.ok) {
        this.deletedTasks.add(taskId);
        this.statusMapping.set(taskId, 'deleted');
      }
      
      return response;
    } catch (error) {
      console.error('Erro ao deletar tarefa:', error);
    }
  }
  
  // Obter tarefas por status
  async getTasksByStatus(status, token) {
    const allTasks = await this.getAllTasks(token);
    
    switch (status) {
      case 'completed':
        return allTasks.filter(task => 
          this.isTaskCompleted(task) && !this.isTaskDeleted(task.id)
        );
      case 'active':
        return allTasks.filter(task => 
          !this.isTaskCompleted(task) && !this.isTaskDeleted(task.id)
        );
      case 'deleted':
        // Tarefas deletadas não aparecem na API, usar histórico local
        return Array.from(this.deletedTasks).map(id => ({ id, status: 'deleted' }));
      default:
        return allTasks;
    }
  }
  
  // Verificar se tarefa está concluída
  isTaskCompleted(task) {
    // IMPLEMENTAR baseado na estratégia que funcionar
    return (
      this.completedTasks.has(task.id) ||
      (task.attributes.observations && task.attributes.observations.includes('STATUS:COMPLETED')) ||
      // Adicionar outras verificações baseadas nos campos disponíveis
      false
    );
  }
  
  // Verificar se tarefa foi deletada
  isTaskDeleted(taskId) {
    return this.deletedTasks.has(taskId);
  }
  
  async getAllTasks(token) {
    const response = await fetch('https://web.monde.com.br/api/v2/tasks', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      }
    });
    
    const data = await response.json();
    return data.data || [];
  }
}
```

## IMPLEMENTAÇÃO RECOMENDADA

### Passo 1: Verificar Campo 'situacao' (PRIORITÁRIO)
```javascript
// FOCO: Verificar especificamente o campo 'situacao' ou 'situation'
async function verificarCampoSituacao(token) {
  try {
    console.log('=== VERIFICANDO CAMPO SITUAÇÃO ===');
    
    const response = await fetch('https://web.monde.com.br/api/v2/tasks', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      }
    });
    
    const data = await response.json();
    
    if (data.data && data.data.length > 0) {
      data.data.forEach((task, index) => {
        console.log(`\n--- TAREFA ${index + 1} ---`);
        console.log(`ID: ${task.id}`);
        
        // VERIFICAR CAMPOS ESPECÍFICOS DE SITUAÇÃO
        const camposSituacao = ['situacao', 'situation', 'status', 'state', 'task_status'];
        
        camposSituacao.forEach(campo => {
          if (task.attributes[campo] !== undefined) {
            console.log(`✓ CAMPO ENCONTRADO - ${campo}: "${task.attributes[campo]}"`);
          }
        });
        
        // MOSTRAR TODOS OS CAMPOS PARA ANÁLISE
        console.log('Todos os attributes:', Object.keys(task.attributes));
      });
    }
    
    // TESTAR FILTROS ESPECÍFICOS
    await testarFiltrosSituacao(token);
    
  } catch (error) {
    console.error('Erro na verificação:', error);
  }
}

// IMPLEMENTAÇÃO ESPECÍFICA BASEADA NO CAMPO SITUAÇÃO
class MondeTaskManager {
  constructor() {
    this.statusField = 'situacao'; // Campo confirmado pela interface
  }
  
  // Buscar tarefas por situação específica
  async getTasksBySituacao(token, situacao) {
    const endpoints = [
      `https://web.monde.com.br/api/v2/tasks?filter[situacao]=${situacao}`,
      `https://web.monde.com.br/api/v2/tasks?filter[situation]=${situacao}`,
      `https://web.monde.com.br/api/v2/tasks?situacao=${situacao}`
    ];
    
    for (const url of endpoints) {
      try {
        console.log(`Testando endpoint: ${url}`);
        
        const response = await fetch(url, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/vnd.api+json',
            'Content-Type': 'application/vnd.api+json'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log(`✓ SUCESSO com ${url}`);
          return data;
        }
      } catch (error) {
        console.log(`✗ Falhou: ${url}`, error.message);
      }
    }
    
    throw new Error(`Não foi possível buscar tarefas com situação: ${situacao}`);
  }
  
  // Buscar apenas tarefas ATIVAS
  async getActiveTasks(token) {
    return await this.getTasksBySituacao(token, 'ativa');
  }
  
  // Buscar apenas tarefas CONCLUÍDAS
  async getCompletedTasks(token) {
    return await this.getTasksBySituacao(token, 'concluida');
  }
  
  // Buscar apenas tarefas EXCLUÍDAS/DELETADAS
  async getDeletedTasks(token) {
    return await this.getTasksBySituacao(token, 'excluida');
  }
  
  // Marcar tarefa como concluída (PATCH)
  async markTaskAsCompleted(taskId, token) {
    const updateData = {
      data: {
        type: 'tasks',
        id: taskId,
        attributes: {
          situacao: 'concluida' // ou o valor correto encontrado
        }
      }
    };
    
    try {
      const response = await fetch(`https://web.monde.com.br/api/v2/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.api+json',
          'Content-Type': 'application/vnd.api+json'
        },
        body: JSON.stringify(updateData)
      });
      
      if (response.ok) {
        console.log(`✓ Tarefa ${taskId} marcada como concluída`);
        return await response.json();
      }
      
      throw new Error(`Erro HTTP: ${response.status}`);
    } catch (error) {
      console.error('Erro ao marcar como concluída:', error);
      throw error;
    }
  }
  
  // Marcar tarefa como excluída (SEM deletar fisicamente)
  async markTaskAsDeleted(taskId, token) {
    const updateData = {
      data: {
        type: 'tasks',
        id: taskId,
        attributes: {
          situacao: 'excluida' // ou o valor correto encontrado
        }
      }
    };
    
    try {
      const response = await fetch(`https://web.monde.com.br/api/v2/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.api+json',
          'Content-Type': 'application/vnd.api+json'
        },
        body: JSON.stringify(updateData)
      });
      
      if (response.ok) {
        console.log(`✓ Tarefa ${taskId} marcada como excluída`);
        return await response.json();
      }
      
      throw new Error(`Erro HTTP: ${response.status}`);
    } catch (error) {
      console.error('Erro ao marcar como excluída:', error);
      throw error;
    }
  }
}

// EXEMPLO DE USO ESPECÍFICO
async function exemploUsoMonde() {
  const token = 'SEU_TOKEN_AQUI';
  const taskManager = new MondeTaskManager();
  
  try {
    // 1. Verificar o campo situação primeiro
    await verificarCampoSituacao(token);
    
    // 2. Buscar tarefas por situação
    console.log('\n=== TAREFAS ATIVAS ===');
    const ativas = await taskManager.getActiveTasks(token);
    console.log(ativas);
    
    console.log('\n=== TAREFAS CONCLUÍDAS ===');
    const concluidas = await taskManager.getCompletedTasks(token);
    console.log(concluidas);
    
    console.log('\n=== TAREFAS EXCLUÍDAS ===');
    const excluidas = await taskManager.getDeletedTasks(token);
    console.log(excluidas);
    
    // 3. Testar mudança de status
    // await taskManager.markTaskAsCompleted('ID_DA_TAREFA', token);
    // await taskManager.markTaskAsDeleted('ID_DA_TAREFA', token);
    
  } catch (error) {
    console.error('Erro no exemplo:', error);
  }
}
```
```

### Passo 2: Implementar Solução Específica do Monde
```javascript
// IMPLEMENTAÇÃO FINAL - Use esta após confirmar o campo "situacao"
const taskManager = new MondeTaskManager();

async function implementacaoFinal() {
  const token = 'SEU_TOKEN_AQUI';
  
  try {
    // ETAPA 1: Verificar campo situação
    console.log('ETAPA 1: Verificando campo situacao...');
    await verificarCampoSituacao(token);
    
    // ETAPA 2: Implementar filtros específicos
    console.log('\nETAPA 2: Testando filtros...');
    
    // Buscar tarefas ativas
    const tarefasAtivas = await taskManager.getActiveTasks(token);
    console.log(`✓ Encontradas ${tarefasAtivas.data?.length || 0} tarefas ativas`);
    
    // Buscar tarefas concluídas 
    const tarefasConcluidas = await taskManager.getCompletedTasks(token);
    console.log(`✓ Encontradas ${tarefasConcluidas.data?.length || 0} tarefas concluídas`);
    
    // Buscar tarefas excluídas
    const tarefasExcluidas = await taskManager.getDeletedTasks(token);
    console.log(`✓ Encontradas ${tarefasExcluidas.data?.length || 0} tarefas excluídas`);
    
    // ETAPA 3: Demonstrar mudança de status
    console.log('\nETAPA 3: Testando mudança de status...');
    
    if (tarefasAtivas.data && tarefasAtivas.data.length > 0) {
      const primeiraAtiva = tarefasAtivas.data[0];
      console.log(`Testando com tarefa ID: ${primeiraAtiva.id}`);
      
      // DESCOMENTAR PARA TESTAR MUDANÇA DE STATUS:
      // await taskManager.markTaskAsCompleted(primeiraAtiva.id, token);
      // console.log('✓ Tarefa marcada como concluída');
    }
    
    return {
      ativas: tarefasAtivas,
      concluidas: tarefasConcluidas, 
      excluidas: tarefasExcluidas
    };
    
  } catch (error) {
    console.error('Erro na implementação:', error);
    throw error;
  }
}

// EXECUÇÃO PRINCIPAL
implementacaoFinal()
  .then(resultado => {
    console.log('\n🎉 IMPLEMENTAÇÃO CONCLUÍDA COM SUCESSO!');
    console.log('Resultado:', resultado);
  })
  .catch(error => {
    console.error('❌ ERRO NA IMPLEMENTAÇÃO:', error);
  });
```

## VALORES CONFIRMADOS PARA O CAMPO 'situacao':
- **`"ativa"`** - Tarefa ativa/em andamento
- **`"concluida"`** - Tarefa concluída/finalizada  
- **`"excluida"`** - Tarefa excluída/deletada (mas ainda existe no banco)

## ENDPOINTS FINAIS RECOMENDADOS:
```javascript
// FILTROS ESPECÍFICOS QUE DEVEM FUNCIONAR:
const endpoints = {
  ativas: 'https://web.monde.com.br/api/v2/tasks?filter[situacao]=ativa',
  concluidas: 'https://web.monde.com.br/api/v2/tasks?filter[situacao]=concluida',
  excluidas: 'https://web.monde.com.br/api/v2/tasks?filter[situacao]=excluida'
};
```

## CAMPOS ESPECÍFICOS DA API MONDE (CONFIRMADOS)
**CAMPO PRINCIPAL**: `situacao` ou `situation` (baseado na interface mostrada)

Valores esperados:
- `"ativa"` ou `"active"` - Tarefa ativa
- `"concluida"` ou `"completed"` - Tarefa concluída  
- `"excluida"` ou `"deleted"` - Tarefa excluída/deletada

**OUTROS CAMPOS PARA VERIFICAR:**
- `status`
- `state` 
- `situacao`
- `situation`
- `task_status`
- `completed_at`
- `deleted_at`
- `excluded_at`

## PRÓXIMOS PASSOS (ESPECÍFICOS PARA MONDE)
1. **Execute `verificarCampoSituacao(token)`** - Confirma o campo "situacao"
2. **Teste os filtros**: `/api/v2/tasks?filter[situacao]=ativa|concluida|excluida`
3. **Use a classe `MondeTaskManager`** - Já otimizada para a API Monde
4. **Implemente `markTaskAsCompleted()` e `markTaskAsDeleted()`** - Para mudanças de status
5. **Teste com `implementacaoFinal()`** - Execução completa

## DIFERENÇA CONFIRMADA:
- **Tarefa CONCLUÍDA**: `situacao: "concluida"` (tarefa finalizada, mas visível)
- **Tarefa EXCLUÍDA**: `situacao: "excluida"` (tarefa "deletada", mas ainda no banco)
- **Deleção FÍSICA**: `DELETE /tasks/:id` (remove completamente do banco)

## SOLUÇÃO FINAL:
```javascript
// USO DIRETO - Cole isso no Replit:
const monde = new MondeTaskManager();

// Buscar por tipo específico:
const ativas = await monde.getActiveTasks(token);
const concluidas = await monde.getCompletedTasks(token); 
const excluidas = await monde.getDeletedTasks(token);

// Mudar status sem perder dados:
await monde.markTaskAsCompleted(taskId, token);   // marca como concluída
await monde.markTaskAsDeleted(taskId, token);     // marca como excluída
```

## IMPORTANTE
- Sempre faça backup dos IDs das tarefas antes de deletar
- Teste primeiro em ambiente de desenvolvimento
- Documente os campos específicos que a API do Monde utiliza para status