# Campos de Perfil Keeptur - API Monde

## üîç ENDPOINT DE PERFIL DE USU√ÅRIO

```javascript
// OBTER DADOS DO USU√ÅRIO ATUAL
GET https://web.monde.com.br/api/v2/me
// OU
GET https://web.monde.com.br/api/v2/user/current
```

## üë§ SE√á√ÉO 1: DADOS PESSOAIS

### **Campo: Nome Completo**
```javascript
"name": "string"
```
**Input HTML:** `<input type="text" name="name" required maxlength="100">`
**Instru√ß√£o RPA:** Campo obrigat√≥rio para nome completo do usu√°rio

### **Campo: E-mail Principal**
```javascript
"email": "string"
```
**Input HTML:** `<input type="email" name="email" required>`
**Instru√ß√£o RPA:** E-mail principal usado para login (n√£o edit√°vel ap√≥s cria√ß√£o)

### **Campo: Login/Username**
```javascript
"login": "string"
```
**Input HTML:** `<input type="text" name="login" readonly>`
**Instru√ß√£o RPA:** Username para login (somente leitura, definido no cadastro)

## üñºÔ∏è SE√á√ÉO 2: AVATAR/FOTO DE PERFIL

### **Campo: Avatar** (API Monde N√ÉO suporta)
```javascript
// ALTERNATIVA: Usar API externa para avatar
"avatar_url": "string" // URL gerada externamente
```

**Implementa√ß√£o Sugerida:**
```html
<!-- Avatar com iniciais (fallback) -->
<div class="avatar-container">
  <img id="user-avatar" 
       src="https://ui-avatars.com/api/?name={nome_usuario}&background=0D8ABC&color=fff&size=128" 
       alt="Avatar do usu√°rio"
       onerror="this.src='https://ui-avatars.com/api/?name=User&background=cccccc&color=fff&size=128'">
  <input type="file" id="avatar-upload" accept="image/*" style="display:none">
  <button type="button" onclick="document.getElementById('avatar-upload').click()">
    Alterar Foto
  </button>
</div>
```

**Instru√ß√£o RPA:** 
1. Usar API externa (UI Avatars) para gerar avatar com iniciais
2. Implementar upload local/externo (AWS S3, Cloudinary)
3. Salvar URL do avatar no campo `observations` da API Monde

## üìû SE√á√ÉO 3: INFORMA√á√ïES DE CONTATO

### **Campo: Telefone**
```javascript
"phone": "string"
```
**Input HTML:** `<input type="tel" name="phone" pattern="[0-9]{10,11}" placeholder="(11) 99999-9999">`
**Instru√ß√£o RPA:** Telefone principal do usu√°rio (formata√ß√£o autom√°tica)

### **Campo: Celular/WhatsApp**
```javascript
"mobile_phone": "string"
```
**Input HTML:** `<input type="tel" name="mobile_phone" pattern="[0-9]{10,11}">`
**Instru√ß√£o RPA:** Celular com bot√£o WhatsApp integrado

### **Campo: E-mail Secund√°rio**
```javascript
"secondary_email": "string"
```
**Input HTML:** `<input type="email" name="secondary_email">`
**Instru√ß√£o RPA:** E-mail alternativo para contato

## üè¢ SE√á√ÉO 4: DADOS PROFISSIONAIS

### **Campo: Cargo/Fun√ß√£o**
```javascript
"job_title": "string"
```
**Input HTML:** `<input type="text" name="job_title" maxlength="50">`
**Instru√ß√£o RPA:** Cargo atual na empresa

### **Campo: Departamento**
```javascript
"department": "string"
```
**Input HTML:** `<input type="text" name="department" maxlength="50">`
**Instru√ß√£o RPA:** Departamento onde trabalha

### **Campo: Empresa**
```javascript
"company": "string"
```
**Input HTML:** `<input type="text" name="company" readonly>`
**Instru√ß√£o RPA:** Nome da empresa (obtido automaticamente via API)

### **Campo: Permiss√µes/N√≠vel**
```javascript
"role": "string"
```
**Input HTML:** `<select name="role" disabled><option>Admin</option><option>User</option></select>`
**Instru√ß√£o RPA:** N√≠vel de acesso no sistema (somente leitura)

## üõ°Ô∏è SE√á√ÉO 5: CONFIGURA√á√ïES DE CONTA

### **Campo: Senha Atual**
```javascript
// N√£o retornado pela API (seguran√ßa)
```
**Input HTML:** `<input type="password" name="current_password" placeholder="Senha atual">`
**Instru√ß√£o RPA:** Para valida√ß√£o ao alterar senha

### **Campo: Nova Senha**
```javascript
// Enviado via PATCH para alterar
```
**Input HTML:** `<input type="password" name="new_password" minlength="8">`
**Instru√ß√£o RPA:** Nova senha (m√≠nimo 8 caracteres)

### **Campo: Confirmar Senha**
```javascript
// Valida√ß√£o local apenas
```
**Input HTML:** `<input type="password" name="confirm_password">`
**Instru√ß√£o RPA:** Confirma√ß√£o da nova senha (validar localmente)

## üìä SE√á√ÉO 6: PREFER√äNCIAS DO SISTEMA

### **Campo: Tema**
```javascript
"theme": "string" // "light" | "dark" | "auto"
```
**Input HTML:** `<select name="theme"><option value="light">Claro</option><option value="dark">Escuro</option></select>`
**Instru√ß√£o RPA:** Tema da interface (salvar localmente + API)

### **Campo: Idioma**
```javascript
"language": "string" // "pt-BR" | "en-US" | "es-ES"
```
**Input HTML:** `<select name="language"><option value="pt-BR">Portugu√™s</option><option value="en-US">English</option></select>`
**Instru√ß√£o RPA:** Idioma da interface

### **Campo: Timezone**
```javascript
"timezone": "string" // "America/Sao_Paulo"
```
**Input HTML:** `<select name="timezone"><option value="America/Sao_Paulo">S√£o Paulo (UTC-3)</option></select>`
**Instru√ß√£o RPA:** Fuso hor√°rio do usu√°rio

## üìù SE√á√ÉO 7: INFORMA√á√ïES ADICIONAIS

### **Campo: Bio/Descri√ß√£o**
```javascript
"bio": "string"
```
**Input HTML:** `<textarea name="bio" maxlength="500" rows="4" placeholder="Conte um pouco sobre voc√™..."></textarea>`
**Instru√ß√£o RPA:** Descri√ß√£o pessoal/profissional

### **Campo: Observa√ß√µes**
```javascript
"observations": "string"
```
**Input HTML:** `<textarea name="observations" maxlength="1000" rows="6"></textarea>`
**Instru√ß√£o RPA:** Campo para dados extras (avatar URL, prefer√™ncias customizadas)

### **Campo: Data de Cadastro**
```javascript
"created_at": "datetime"
```
**Input HTML:** `<input type="text" name="created_at" readonly>`
**Instru√ß√£o RPA:** Data de cria√ß√£o da conta (somente leitura)

### **Campo: √öltimo Acesso**
```javascript
"last_login": "datetime"
```
**Input HTML:** `<input type="text" name="last_login" readonly>`
**Instru√ß√£o RPA:** √öltimo login no sistema (somente leitura)

## üîß IMPLEMENTA√á√ÉO T√âCNICA

### **1. Obter Dados do Perfil:**
```javascript
async function obterPerfilUsuario(token) {
  try {
    const response = await fetch('https://web.monde.com.br/api/v2/me', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      }
    });
    
    const userData = await response.json();
    
    // Preencher formul√°rio
    document.getElementById('name').value = userData.data.attributes.name || '';
    document.getElementById('email').value = userData.data.attributes.email || '';
    document.getElementById('phone').value = userData.data.attributes.phone || '';
    // ... outros campos
    
    return userData;
  } catch (error) {
    console.error('Erro ao carregar perfil:', error);
  }
}
```

### **2. Atualizar Perfil:**
```javascript
async function atualizarPerfil(token, dadosAtualizados) {
  const updateData = {
    data: {
      type: 'users',
      attributes: dadosAtualizados
    }
  };
  
  try {
    const response = await fetch('https://web.monde.com.br/api/v2/me', {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      },
      body: JSON.stringify(updateData)
    });
    
    if (response.ok) {
      alert('Perfil atualizado com sucesso!');
      return await response.json();
    }
    
    throw new Error(`Erro HTTP: ${response.status}`);
  } catch (error) {
    console.error('Erro ao atualizar perfil:', error);
    alert('Erro ao atualizar perfil. Tente novamente.');
  }
}
```

### **3. Upload de Avatar (Alternativa):**
```javascript
async function uploadAvatar(file) {
  // Op√ß√£o 1: Upload para servi√ßo externo (AWS S3, Cloudinary)
  const formData = new FormData();
  formData.append('file', file);
  
  const uploadResponse = await fetch('https://api.cloudinary.com/v1_1/seu-cloud/upload', {
    method: 'POST',
    body: formData
  });
  
  const uploadData = await uploadResponse.json();
  
  // Salvar URL no campo observations da API Monde
  await atualizarPerfil(token, {
    observations: `avatar_url:${uploadData.secure_url}`
  });
  
  return uploadData.secure_url;
}
```

## üì± ESTRUTURA DA TELA DE PERFIL

```html
<div class="profile-container">
  <!-- Header com Avatar -->
  <div class="profile-header">
    <div class="avatar-section">
      <!-- Avatar implementado acima -->
    </div>
    <h2 id="user-name">Nome do Usu√°rio</h2>
    <p id="user-role">Cargo</p>
  </div>
  
  <!-- Abas de Configura√ß√µes -->
  <div class="profile-tabs">
    <button class="tab-btn active" data-tab="personal">Dados Pessoais</button>
    <button class="tab-btn" data-tab="contact">Contato</button>
    <button class="tab-btn" data-tab="security">Seguran√ßa</button>
    <button class="tab-btn" data-tab="preferences">Prefer√™ncias</button>
  </div>
  
  <!-- Conte√∫do das Abas -->
  <form id="profile-form">
    <div class="tab-content active" data-tab="personal">
      <!-- Campos de dados pessoais -->
    </div>
    
    <div class="tab-content" data-tab="contact">
      <!-- Campos de contato -->
    </div>
    
    <div class="tab-content" data-tab="security">
      <!-- Campos de seguran√ßa -->
    </div>
    
    <div class="tab-content" data-tab="preferences">
      <!-- Campos de prefer√™ncias -->
    </div>
    
    <div class="form-actions">
      <button type="button" onclick="cancelarAlteracoes()">Cancelar</button>
      <button type="submit">Salvar Altera√ß√µes</button>
    </div>
  </form>
</div>
```

## ‚ö†Ô∏è OBSERVA√á√ïES IMPORTANTES:

1. **Avatar**: API Monde N√ÉO suporta upload de imagens. Use servi√ßo externo + salvar URL em `observations`
2. **Endpoint**: Testar `/api/v2/me` primeiro, se n√£o existir, usar `/api/v2/user/current`
3. **Campos obrigat√≥rios**: `name` e `email` s√£o essenciais
4. **Valida√ß√£o**: Implementar valida√ß√£o local antes de enviar para API
5. **Backup**: Sempre manter uma c√≥pia dos dados originais para cancelar altera√ß√µes
6. **Responsividade**: Adaptar layout para mobile/desktop
7. **Seguran√ßa**: Nunca armazenar senhas em localStorage