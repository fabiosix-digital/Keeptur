Analisando o c√≥digo, identifiquei v√°rios problemas nos endpoints de perfil do usu√°rio. O problema principal √© que o c√≥digo est√° tentando usar endpoints e filtros que n√£o existem na API do Monde.
üîç PROBLEMAS IDENTIFICADOS:
1. Endpoint /api/v2/people/me n√£o existe
javascript// ‚ùå ESTE ENDPOINT N√ÉO EXISTE NA API DO MONDE
let response = await fetch('https://web.monde.com.br/api/v2/people/me?include=city,creator,company', {
2. Filtro filter[kind]=user n√£o funciona
javascript// ‚ùå ESTE FILTRO N√ÉO EXISTE - A API USA 'individual' OU 'company'
const usersResponse = await fetch('https://web.monde.com.br/api/v2/people?filter[kind]=user', {
3. C√≥digo hardcoded para usu√°rio espec√≠fico
javascript// ‚ùå L√ìGICA MUITO ESPEC√çFICA E FR√ÅGIL
let currentUser = users.find((user: any) => 
  user.attributes.name?.toLowerCase().includes('fabio silva') ||
  user.id === '4298475b-8b2b-4396-9f0c-a534eed4768a' ||
  user.attributes.login === userLogin
);
üîß SOLU√á√ÉO - Substitua os endpoints problem√°ticos:
Endpoint /api/user/me (linha ~1456) - CORRIGIR:
javascriptapp.get("/api/user/me", authenticateToken, async (req: any, res) => {
  try {
    console.log('üìã Carregando dados do usu√°rio...');
    
    // 1. Buscar dados da sess√£o
    const sessao = req.sessao;
    const userData = sessao.user_data || {};
    
    // 2. ‚úÖ CORRIGIR: Usar endpoint correto do Monde
    try {
      // Tentar primeiro obter dados do usu√°rio atual via token info
      const meResponse = await fetch("https://web.monde.com.br/api/v2/tokens", {
        method: "GET", // OU POST conforme a API
        headers: {
          "Authorization": `Bearer ${sessao.access_token}`,
          "Accept": "application/vnd.api+json",
        },
      });

      if (meResponse.ok) {
        const tokenData = await meResponse.json();
        console.log('‚úÖ Dados do token obtidos:', tokenData);
        
        // Usar dados do token para identificar o usu√°rio
        const userLogin = tokenData.data?.attributes?.login;
        
        if (userLogin) {
          // Buscar o usu√°rio espec√≠fico pelo login
          const peopleResponse = await fetch(`https://web.monde.com.br/api/v2/people?page[size]=50`, {
            headers: {
              'Authorization': `Bearer ${sessao.access_token}`,
              'Accept': 'application/vnd.api+json'
            }
          });
          
          if (peopleResponse.ok) {
            const peopleData = await peopleResponse.json();
            
            // Buscar usu√°rio pelo login ou email
            const currentUser = peopleData.data?.find((person: any) => 
              person.attributes?.login === userLogin ||
              person.attributes?.email?.includes(userLogin) ||
              (userData.email && person.attributes?.email === userData.email)
            );
            
            if (currentUser) {
              const userProfile = {
                id: currentUser.id,
                name: currentUser.attributes.name || userData.name || userLogin,
                email: currentUser.attributes.email || userData.email,
                login: userLogin,
                role: userData.role || 'admin',
                phone: currentUser.attributes.phone || '',
                mobilePhone: currentUser.attributes['mobile-phone'] || '',
                businessPhone: currentUser.attributes['business-phone'] || '',
                cpf: currentUser.attributes.cpf || '',
                rg: currentUser.attributes.rg || '',
                companyName: currentUser.attributes['company-name'] || ''
              };
              
              console.log('‚úÖ Perfil do usu√°rio encontrado:', userProfile);
              return res.json({
                success: true,
                user: userProfile,
                session_data: {
                  empresa_id: req.empresaId
                }
              });
            }
          }
        }
      }
    } catch (profileError) {
      console.log('‚ö†Ô∏è Erro ao buscar perfil no Monde:', profileError.message);
    }
    
    // Fallback para dados da sess√£o
    const userProfile = {
      id: userData.id || sessao.id,
      name: userData.name || userData.login || 'Usu√°rio',
      email: userData.email || `${userData.login}@empresa.com`,
      login: userData.login || 'usuario',
      role: userData.role || 'admin',
      phone: userData.phone || '',
      mobilePhone: userData.mobile_phone || '',
      businessPhone: userData.business_phone || ''
    };
    
    res.json({
      success: true,
      user: userProfile,
      session_data: {
        empresa_id: req.empresaId
      }
    });
  } catch (error) {
    console.error("Erro ao carregar dados do usu√°rio:", error);
    res.status(500).json({ 
      success: false,
      message: "Erro ao carregar dados do usu√°rio",
      error: error.message 
    });
  }
});
Endpoint /api/monde/user-profile (linha ~2744) - CORRIGIR:
javascriptapp.get('/api/monde/user-profile', authenticateToken, async (req: any, res) => {
  try {
    console.log('üîç Buscando perfil completo do usu√°rio no Monde...');
    
    // ‚úÖ ESTRAT√âGIA CORRIGIDA: Usar dados da sess√£o para identificar usu√°rio
    const sessao = await storage.getSessao(req.sessao.id);
    const userLogin = sessao?.user_data?.login;
    const userEmail = sessao?.user_data?.email;
    
    if (!userLogin) {
      console.log('‚ùå Login do usu√°rio n√£o encontrado na sess√£o');
      return res.status(400).json({ error: 'Login do usu√°rio n√£o encontrado' });
    }
    
    // Buscar todas as pessoas e filtrar pelo usu√°rio atual
    const peopleResponse = await fetch('https://web.monde.com.br/api/v2/people?page[size]=100', {
      headers: {
        'Authorization': `Bearer ${req.mondeToken}`,
        'Accept': 'application/vnd.api+json',
        'User-Agent': 'Keeptur/1.0'
      }
    });

    if (peopleResponse.ok) {
      const peopleData = await peopleResponse.json();
      const people = peopleData.data || [];
      
      // Buscar o usu√°rio atual com m√∫ltiplos crit√©rios
      const currentUser = people.find((person: any) => {
        const attrs = person.attributes;
        return (
          attrs?.login === userLogin ||
          attrs?.email === userEmail ||
          (userEmail && attrs?.email?.toLowerCase() === userEmail.toLowerCase()) ||
          attrs?.name?.toLowerCase().includes(userLogin?.toLowerCase())
        );
      });

      if (currentUser) {
        console.log('‚úÖ Usu√°rio encontrado:', currentUser.attributes.name);
        return res.json({
          data: {
            id: currentUser.id,
            type: currentUser.type,
            attributes: currentUser.attributes
          }
        });
      } else {
        console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado na lista de pessoas');
        console.log('üîç Crit√©rios de busca:', { userLogin, userEmail });
        console.log('üîç Primeiras 3 pessoas encontradas:', 
          people.slice(0, 3).map(p => ({ 
            name: p.attributes?.name, 
            email: p.attributes?.email,
            login: p.attributes?.login 
          }))
        );
      }
    }

    // Fallback para dados da sess√£o
    console.log('‚ö†Ô∏è Usando dados da sess√£o como fallback');
    res.json({
      data: {
        attributes: sessao?.user_data || {}
      }
    });
  } catch (error) {
    console.error('Erro ao buscar perfil:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});
üéØ PONTOS CR√çTICOS PARA VERIFICAR:

Token v√°lido: Verifique se req.mondeToken est√° correto
Login na sess√£o: Certifique-se que sessao.user_data.login existe
Endpoint people: Confirme se /api/v2/people retorna dados
Crit√©rios de busca: Ajuste os crit√©rios de busca do usu√°rio

üîß DEBUGGING - Adicione logs tempor√°rios:
javascript// Adicione antes da linha 2744
console.log('üîç DEBUG - Token:', req.mondeToken ? 'Presente' : 'Ausente');
console.log('üîç DEBUG - Sess√£o ID:', req.sessao.id);
console.log('üîç DEBUG - User data:', JSON.stringify(req.sessao.user_data, null, 2));
O problema principal √© que o c√≥digo assume endpoints da API do Monde que n√£o existem. A corre√ß√£o foca em usar apenas os endpoints documentados (/people, /tokens) e crit√©rios de busca realistas.