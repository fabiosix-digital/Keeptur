Com base nos seus logs e nos arquivos analisados, encontrei os pontos críticos que explicam por que:

os dados de cliente (nome, telefone, celular e empresa) não aparecem corretamente

as atualizações não aparecem no histórico

e o botão “salvar” não está funcionando como esperado.

✅ 1. Por que os dados do cliente (pessoa) não aparecem?
A falha está em como a tarefa tenta buscar os dados relacionados à pessoa.

O ID da pessoa está vindo corretamente da tarefa.relationships.person.data.id, mas o componente que deveria buscar os dados completos dessa pessoa (nome, telefone, etc.) não encontra esse ID na lista de pessoas carregadas.

Ou seja:

tsx
Copiar
Editar
const pessoa = pessoas.find((p) => p.id === task?.relationships?.person?.data?.id)
→ Aqui o p.id nunca bate com o task.relationships.person.data.id porque:

ou o id está em outro formato (por exemplo: com "pessoas-" ou uuid puro)

ou os pessoas carregados ainda não chegaram no momento da renderização

✅ 2. Telefone e celular não aparecem?
Isso depende diretamente do pessoa.attributes. Se a pessoa não foi encontrada como explicado acima, os campos ficam em branco:

tsx
Copiar
Editar
pessoa?.attributes?.phone
pessoa?.attributes?.mobile
✅ 3. Empresa não aparece?
Mesmo problema. O sistema tenta buscar a empresa com:

tsx
Copiar
Editar
const empresa = empresas.find((e) => e.id === pessoa?.relationships?.empresa?.data?.id)
Se a pessoa não foi carregada corretamente, isso aqui também falha em cascata.

✅ 4. Histórico não salva corretamente e mostra dados de outras tarefas?
A função que carrega os históricos:

tsx
Copiar
Editar
const historicoTarefa = historicos.filter((h) => h.relationships?.task?.data?.id === task.id)
Está puxando todos os históricos do sistema, e depois filtrando localmente. Mas se os históricos carregados vêm de forma global, e a tarefa ainda não foi salva corretamente, esse task.id pode não estar registrado ainda no histórico.

Além disso, o campo de histórico atualizado via mutation pode estar salvando, mas o frontend não está refetchando os dados após o mutate() — por isso você vê a mensagem ✅ Histórico salvo com sucesso mas nada muda visualmente.

✅ 5. Botão "Salvar" não fecha o modal nem atualiza os campos?
Isso está associado ao handleSave:

O mutate deve ser assíncrono, e só depois que a mutation for bem-sucedida, a modal deve fechar.

Se não houver await ou callback de sucesso, o modal permanece aberto e o frontend não reflete as mudanças.

✅ Correções recomendadas
🛠 1. Corrigir busca da pessoa
Substituir:

tsx
Copiar
Editar
const pessoa = pessoas.find((p) => p.id === task?.relationships?.person?.data?.id)
Por algo mais robusto que compare o ID padronizado:

tsx
Copiar
Editar
const pessoaId = task?.relationships?.person?.data?.id
const pessoa = pessoas.find((p) => p.id?.toString() === pessoaId?.toString())
Ou usar .includes() se o id vier com prefixo tipo "pessoas-123".

🛠 2. Forçar refetch dos históricos após salvar
tsx
Copiar
Editar
mutate(data, {
  onSuccess: () => {
    refetchHistoricos()
    fecharModal()
  }
})
🛠 3. Garantir que empresas estejam carregadas antes de renderizar
Você pode condicionar o rendering com:

tsx
Copiar
Editar
if (!pessoas.length || !empresas.length || !task) return <Loading />
🛠 4. Validar se task.relationships.person.data.id é realmente o mesmo tipo de p.id
Verifique no console se os valores são compatíveis, ou normalize ambos os lados antes de comparar.

Se quiser, posso te entregar agora:

o trecho exato corrigido da busca de pessoa + telefone + empresa

o handleSave completo com fechamento automático do modal

o refetch de histórico sincronizado

Só confirmar que eu monto o código pronto agora.








Você disse:
faça isso


O ChatGPT disse:
Perfeito. Abaixo está o que você precisa para corrigir todos os problemas mencionados: busca correta do cliente, empresa, telefone, celular, histórico e salvamento com fechamento do modal.

✅ 1. Correção da busca da pessoa (cliente)
Substitua o trecho onde você encontra a pessoa associada à tarefa:

ANTES
tsx
Copiar
Editar
const pessoa = pessoas.find((p) => p.id === task?.relationships?.person?.data?.id)
DEPOIS
tsx
Copiar
Editar
const pessoaId = task?.relationships?.person?.data?.id?.toString() || ''
const pessoa = pessoas.find((p) => p.id?.toString() === pessoaId)
✅ 2. Busca correta da empresa vinculada à pessoa
Substitua:

tsx
Copiar
Editar
const empresa = empresas.find((e) => e.id === pessoa?.relationships?.empresa?.data?.id)
Por:

tsx
Copiar
Editar
const empresaId = pessoa?.relationships?.empresa?.data?.id?.toString() || ''
const empresa = empresas.find((e) => e.id?.toString() === empresaId)
✅ 3. Exibir corretamente nome, telefone, celular e empresa
tsx
Copiar
Editar
<p><strong>Cliente:</strong> {pessoa?.attributes?.name || 'Sem nome'}</p>
<p><strong>Telefone:</strong> {pessoa?.attributes?.phone || 'Sem telefone'}</p>
<p><strong>Celular:</strong> {pessoa?.attributes?.mobile || 'Sem celular'}</p>
<p><strong>Empresa:</strong> {empresa?.attributes?.name || 'Sem empresa'}</p>
✅ 4. Salvar tarefa e atualizar histórico com fechamento do modal
Aqui está o onSubmit completo corrigido:

tsx
Copiar
Editar
const onSubmit = async () => {
  try {
    const response = await updateTarefaMutation.mutateAsync({
      id: task.id,
      ...formData // substitua por seus campos reais
    })

    console.log('✅ Tarefa atualizada com sucesso:', response)

    await createHistoricoMutation.mutateAsync({
      tarefaId: task.id,
      descricao: `Atualização feita: ${JSON.stringify(formData)}`
    })

    console.log('✅ Histórico salvo com sucesso')

    await refetchTarefas()
    await refetchHistoricos()

    closeModal() // Feche o modal apenas após tudo
  } catch (error) {
    console.error('❌ Erro ao salvar tarefa ou histórico:', error)
  }
}
Se o updateTarefaMutation não for assíncrono, use:

tsx
Copiar
Editar
updateTarefaMutation.mutate(data, {
  onSuccess: () => {
    createHistoricoMutation.mutate({
      tarefaId: task.id,
      descricao: `Atualização feita: ${JSON.stringify(formData)}`
    }, {
      onSuccess: () => {
        refetchTarefas()
        refetchHistoricos()
        closeModal()
      }
    })
  }
})
✅ 5. Filtrar histórico da tarefa correta
tsx
Copiar
Editar
const historicoTarefa = historicos.filter(
  (h) => h.relationships?.task?.data?.id?.toString() === task.id?.toString()
)
Se quiser, posso revisar seu dashboard.tsx inteiro e aplicar isso diretamente