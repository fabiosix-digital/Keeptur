Orienta√ß√£o Detalhada para Corre√ß√£o do Sistema Keeptur
üö® PROBLEMAS IDENTIFICADOS
1. MANIPULA√á√ÉO INCORRETA DE DADOS

Tarefas exclu√≠das no Monde est√£o sendo exibidas como "Pendentes"
Dados em cache n√£o refletem o estado real da API
L√≥gica de filtros sobrepondo estados reais

2. ARQUITETURA DE DADOS PROBLEM√ÅTICA

M√∫ltiplos estados para as mesmas informa√ß√µes (allTasks, tasks, etc.)
Sincroniza√ß√£o inconsistente entre frontend e backend
Cache local n√£o sendo invalidado corretamente

üîß CORRE√á√ïES OBRIGAT√ìRIAS
ETAPA 1: SIMPLIFICA√á√ÉO DA L√ìGICA DE DADOS
typescript// SUBSTITUIR toda a l√≥gica complexa de filtros por:

// 1. UM √öNICO ESTADO PARA TAREFAS
const [tasks, setTasks] = useState<any[]>([]);

// 2. UM √öNICO M√âTODO DE CARREGAMENTO
const loadTasks = async (filters: any = {}) => {
  const params = new URLSearchParams();
  
  // Aplicar filtros APENAS na API, n√£o no frontend
  if (filters.assignee) params.append('assignee', filters.assignee);
  if (filters.situation) params.append('situation', filters.situation);
  if (filters.category) params.append('category', filters.category);
  
  const response = await fetch(`/api/monde/tarefas?${params}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  const data = await response.json();
  setTasks(data.data || []); // USAR EXATAMENTE OS DADOS DA API
};
ETAPA 2: CORRE√á√ÉO DO BACKEND
typescript// NO ARQUIVO server.ts - SIMPLIFICAR O ENDPOINT /api/monde/tarefas

app.get("/api/monde/tarefas", authenticateToken, async (req: any, res) => {
  try {
    // 1. CONSTRUIR URL BASEADA APENAS NOS FILTROS DA QUERY
    let mondeUrl = `https://web.monde.com.br/api/v2/tasks?include=assignee,person,category`;
    
    // 2. APLICAR FILTROS DIRETAMENTE NA API DO MONDE
    const queryParams = new URLSearchParams();
    
    if (req.query.assignee === 'me') {
      queryParams.append('filter[assigned]', 'user_tasks');
    }
    if (req.query.situation === 'completed') {
      queryParams.append('filter[situation]', 'done');
    }
    if (req.query.situation === 'pending') {
      queryParams.append('filter[situation]', 'open');
    }
    
    if (queryParams.toString()) {
      mondeUrl += `&${queryParams}`;
    }
    
    const response = await fetch(mondeUrl, {
      headers: {
        "Authorization": `Bearer ${req.sessao.access_token}`,
        "Accept": "application/vnd.api+json"
      }
    });
    
    const data = await response.json();
    
    // 3. RETORNAR DADOS EXATOS DA API - SEM MANIPULA√á√ÉO
    res.json(data);
    
  } catch (error) {
    console.error("Erro ao buscar tarefas:", error);
    res.status(500).json({ error: "Erro interno" });
  }
});
ETAPA 3: CORRE√á√ÉO DA L√ìGICA DE STATUS
typescript// REMOVER toda a l√≥gica complexa de getTaskStatus e usar:

const getTaskStatus = (task: any) => {
  // USAR APENAS OS CAMPOS OFICIAIS DA API DO MONDE
  if (task.attributes.completed === true) {
    return { status: "completed", label: "Conclu√≠da", class: "status-badge-completed" };
  }
  
  const now = new Date();
  const dueDate = task.attributes.due ? new Date(task.attributes.due) : null;
  
  if (dueDate && dueDate < now) {
    return { status: "overdue", label: "Atrasada", class: "status-badge-overdue" };
  }
  
  return { status: "pending", label: "Pendente", class: "status-badge-pending" };
};
ETAPA 4: REMO√á√ÉO DE C√ìDIGO PROBLEM√ÅTICO
REMOVER COMPLETAMENTE:

‚úÇÔ∏è Vari√°vel allTasks - usar apenas tasks
‚úÇÔ∏è Fun√ß√£o getFilteredTasks() - aplicar filtros na API
‚úÇÔ∏è Fun√ß√£o calculateTaskStats() - buscar stats da API
‚úÇÔ∏è Fun√ß√£o isTaskDeleted() - usar apenas dados da API
‚úÇÔ∏è L√≥gica de sincroniza√ß√£o autom√°tica - pode estar causando conflitos
‚úÇÔ∏è Listas est√°ticas de tarefas exclu√≠das

ETAPA 5: IMPLEMENTA√á√ÉO DE FILTROS CORRETOS
typescript// NO FRONTEND - Aplicar filtros via API, n√£o localmente

const handleFilterChange = (filterType: string, value: string) => {
  const newFilters = { ...filters, [filterType]: value };
  setFilters(newFilters);
  
  // RECARREGAR DA API COM NOVOS FILTROS
  loadTasks(newFilters);
};

// Filtros devem ser enviados para a API, n√£o aplicados no frontend
ETAPA 6: CORRE√á√ÉO DOS CARDS DE ESTAT√çSTICAS
typescript// Buscar estat√≠sticas diretamente da API

const loadStats = async () => {
  const response = await fetch('/api/monde/tarefas/stats', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await response.json();
  setStats(data); // USAR DADOS REAIS DA API
};
üéØ PRINC√çPIOS OBRIGAT√ìRIOS
1. FONTE √öNICA DA VERDADE

API do Monde = √∫nica fonte de dados
Frontend apenas exibe, n√£o manipula dados
Cache deve refletir exatamente a API

2. N√ÉO MANIPULA√á√ÉO
typescript// ‚ùå PROIBIDO
const filteredTasks = tasks.filter(task => !isDeleted(task));

// ‚úÖ CORRETO
const response = await fetch('/api/monde/tarefas?situation=active');
3. SINCRONIZA√á√ÉO REAL-TIME SIMPLES
typescript// Sincroniza√ß√£o a cada 10 segundos - simples e eficaz
useEffect(() => {
  const interval = setInterval(() => {
    loadTasks(currentFilters);
  }, 10000);
  return () => clearInterval(interval);
}, [currentFilters]);
4. TRATAMENTO DE ERROS CORRETO
typescript// Se API retornar erro, mostrar estado real
if (!response.ok) {
  if (response.status === 401) {
    // Redirecionar para login
    setShowTokenExpiredModal(true);
  }
  // N√ÉO inventar dados ou usar cache antigo
  setTasks([]);
}
üìã CHECKLIST DE IMPLEMENTA√á√ÉO
FASE 1: Limpeza

 Remover allTasks e usar apenas tasks
 Remover fun√ß√µes de manipula√ß√£o local de dados
 Remover listas est√°ticas de tarefas
 Simplificar l√≥gica de status para usar apenas API

FASE 2: Backend

 Simplificar endpoint /api/monde/tarefas
 Remover manipula√ß√£o de dados no servidor
 Garantir que filtros sejam aplicados na API do Monde
 Implementar endpoint de stats real

FASE 3: Frontend

 Implementar carregamento √∫nico de dados
 Aplicar filtros via API calls
 Remover l√≥gica de cache complexa
 Testar com dados reais do Monde

FASE 4: Testes

 Verificar se tarefa exclu√≠da no Monde n√£o aparece
 Verificar se filtros funcionam corretamente
 Verificar se stats refletem dados reais
 Testar sincroniza√ß√£o em tempo real

üö® REGRAS CR√çTICAS

JAMAIS criar dados fict√≠cios ou manipular resposta da API
SEMPRE usar dados exatos retornados pelo Monde
NUNCA aplicar filtros no frontend - sempre na API
SEMPRE invalidar cache ao fazer altera√ß√µes
JAMAIS assumir estado - sempre consultar API

